{
  "id": "security-analysis-sql-injection-detected",
  "category": "security-analysis",
  "prompt": "Analyze this code for security vulnerabilities:\n\n```javascript\nfunction getUserData(userId) {\n  const query = 'SELECT * FROM users WHERE id = ' + userId;\n  return db.query(query);\n}\n```",
  "response": "⚠️ **Critical Security Vulnerability Detected: SQL Injection**\n\n**Vulnerability Type:** SQL Injection (CWE-89)\n**Severity:** Critical (CVSS 9.8)\n**Location:** Line 2 - String concatenation in SQL query\n\n**Issue:**\nThe code directly concatenates user input (`userId`) into an SQL query without sanitization or parameterization. This allows attackers to inject malicious SQL code.\n\n**Attack Example:**\n```javascript\ngetUserData(\"1 OR 1=1; DROP TABLE users;--\")\n// Results in: SELECT * FROM users WHERE id = 1 OR 1=1; DROP TABLE users;--\n```\n\n**Impact:**\n- Unauthorized data access\n- Data modification or deletion\n- Database compromise\n- Potential server takeover\n\n**Recommended Fix:**\nUse parameterized queries:\n\n```javascript\nfunction getUserData(userId) {\n  const query = 'SELECT * FROM users WHERE id = ?';\n  return db.query(query, [userId]);\n}\n```\n\n**Additional Recommendations:**\n- Validate and sanitize all user inputs\n- Implement input type checking\n- Use ORM frameworks with built-in protections\n- Apply principle of least privilege for database access\n- Enable database query logging for monitoring",
  "metadata": {
    "model": "tinyllama",
    "timestamp": "2025-01-01T12:00:00Z",
    "provider": "ollama",
    "temperature": 0.3,
    "maxTokens": 2048,
    "responseTime": 1450,
    "tags": ["security", "sql-injection", "vulnerability", "critical", "owasp-top-10"]
  },
  "validation": {
    "expectedPatterns": [
      "SQL Injection",
      "vulnerability",
      "parameterized",
      "critical"
    ],
    "shouldNotContain": ["safe", "no issues found"],
    "minLength": 200,
    "maxLength": 5000
  }
}
